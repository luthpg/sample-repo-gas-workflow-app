// Auto-generated by gasnuki
// Do NOT edit this file manually.

import type { ApprovalForm } from '../approval';

export type ServerScripts = {
  /**
   * 新しい稟議申請を作成し、スプレッドシートに追記する
   * @param formData 稟議申請フォームのデータ
   * @returns 成功メッセージ
   */
  createApprovalRequest(formData: ApprovalForm): string;

  /**
   * 既存の稟議申請を編集する
   * @param id 編集対象の稟議申請ID
   * @param formData 新しい稟議申請フォームのデータ
   * @returns 成功メッセージ
   */
  editApprovalRequest(id: string, formData: ApprovalForm): string;

  /**
   * スプレッドシートから稟議申請を取得する（ページネーション対応）
   * @param limit 取得件数
   * @param offset 開始位置
   * @returns 稟議申請の配列と総件数
   */
  getApprovalRequests(limit: number, offset: number): string;

  /**
   * 稟議申請のステータスを更新する
   * @param id 稟議申請ID
   * @param newStatus 新しいステータス ('approved' or 'rejected')
   * @param reason 却下理由 (却下時のみ)
   * @param approverComment 承認コメント (承認時のみ)
   * @returns 成功メッセージ
   */
  updateApprovalStatus(
    id: string,
    newStatus: 'approved' | 'rejected',
    reason?: string,
    approverComment?: string,
  ): string;

  /**
   * 稟議申請を申請者自身が取り下げる
   * @param id 稟議申請ID
   * @returns 成功メッセージ
   */
  withdrawApprovalRequest(id: string): string;

  /**
   * 自身の過去の申請情報を参照し、承認者一覧を取得
   * @param limit 検索する過去申請件数の上限値
   * @returns 承認者一覧
   */
  getApprovers(limit: number): string;

  generateUniqueId(): string;
};

// Auto-generated Types for GoogleAppsScript in client-side code

export type RemoveReturnType<T> = {
  [P in keyof T]: T[P] extends (...args: infer A) => any
    ? (...args: A) => void
    : T[P];
};

type _AppsScriptRun = RemoveReturnType<ServerScripts> & {
  [key: string]: (...args: any[]) => any;
  withSuccessHandler: <T = string | number | boolean | undefined, U = any>(
    callback: (returnValues: T, userObject?: U) => void,
  ) => _AppsScriptRun;
  withFailureHandler: <U = any>(
    callback: (error: Error, userObject?: U) => void,
  ) => _AppsScriptRun;
  withUserObject: <U = any>(userObject: U) => _AppsScriptRun;
};

type _AppsScriptHistoryFunction = (
  stateObject: object,
  params: object,
  hash: string,
) => void;

interface _WebAppLocationType {
  hash: string;
  parameter: Record<string, string>;
  parameters: Record<string, string[]>;
}

export declare interface GoogleClientSideApi {
  script: {
    run: _AppsScriptRun;
    url: {
      getLocation: (callback: (location: _WebAppLocationType) => void) => void;
    };
    history: {
      push: _AppsScriptHistoryFunction;
      replace: _AppsScriptHistoryFunction;
      setChangeHandler: (
        callback: (e: { state: object; location: _WebAppLocationType }) => void,
      ) => void;
    };
  };
}

declare global {
  const google: GoogleClientSideApi;
}
